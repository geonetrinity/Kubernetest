https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/

How a ReplicationController Works
If there are too many pods, the ReplicationController terminates the extra pods. If there are too few, the ReplicationController starts more pods. Unlike manually created pods, the pods maintained by a ReplicationController are automatically replaced if they fail, are deleted, or are terminated. For example, your pods are re-created on a node after disruptive maintenance such as a kernel upgrade. For this reason, you should use a ReplicationController even if your application requires only a single pod. A ReplicationController is similar to a process supervisor, but instead of supervising individual processes on a single node, the ReplicationController supervises multiple pods across multiple nodes.

ReplicationController is often abbreviated to "rc" in discussion, and as a shortcut in kubectl commands.

A simple case is to create one ReplicationController object to reliably run one instance of a Pod indefinitely. A more complex use case is to run several identical replicas of a replicated service, such as web servers.

Running an example ReplicationController
This example ReplicationController config runs three copies of the nginx web server.

# kubectl apply -f https://k8s.io/examples/controllers/replication.yaml
# kubectl apply -f replication.yaml
# kubectl describe replicationcontrollers/nginx

# kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort
service "soaktest" exposed